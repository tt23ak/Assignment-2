# -*- coding: utf-8 -*-
"""Assigment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RzZho8QpbN7oqEY-rKr7DPRcm7jdZm0Y

### Importing Important Libraries
"""

import seaborn as sns
import random
import pandas as pd  # import panda library as pd for data manipulation
import matplotlib.pyplot as plt  # import matplotlib as plt for data visualitzation
from matplotlib import style
import numpy as np  # import nump as np
import seaborn as sns  # seaborn is data visualization library build on matplotlib
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

"""### Implement a Function Which return Original DataFrame, Transposed DataFrames"""


def transpose_file(filename: str):

    # Read the file into a pandas dataframe
    dataframe = pd.read_csv(filename)

    # Transpose the dataframe
    df_transposed = dataframe.transpose()

    # Populate the header of the transposed dataframe with the header information

    # silice the dataframe to get the year as columns
    df_transposed.columns = df_transposed.iloc[1]

    # As year is now columns so we don't need it as rows
    transposed_year = df_transposed[0:].drop('year')

    # silice the dataframe to get the country as columns
    df_transposed.columns = df_transposed.iloc[0]

    # As country is now columns so we don't need it as rows
    transposed_country = df_transposed[0:].drop('country')

    return dataframe, transposed_country, transposed_year

# Passing filename to Real Worldbank data function
# will return three dataframe:
# org dataframe, transposed country as columns and transposed year as column


org_df, df_by_country, df_by_year = transpose_file('worldbank_dataset.csv')

"""### Original DataFrame"""

# show the first 5 row
org_df.head(5)

"""### show the statistics of Original Data"""

org_df.describe()  # describe method show the statistic of dataframe

"""### DataFrame In Which Countries are Columns"""

# show the first 5 row
df_by_country.head(5)

"""### DataFrame In Which Year are Columns"""

# show the first 5 row
df_by_year

org_df.columns

"""### Create DataFrame related to Government expenditure on education
### For All the countries and years
"""

# we want to see countries government_expenditure_on_education over specfic years
# we need to filter our original data frame to get specific fields

# Filter the data for non-null values
government_expenditure_on_education = org_df[[
    'country', 'year', 'government_expenditure_on_education']].dropna()

"""### Get Data to Specific Years from 1990 to 2020"""


# Define the years for which you want to plot data
years_to_plot = [1990, 2000, 2010, 2015, 2020]

# Get a list of all named colors in Matplotlib
all_colors = list(mcolors.CSS4_COLORS.keys())

# Select a specific number of random colors from the list
num_colors_to_select = 10  # You can change this number as needed
selected_colors = random.sample(all_colors, num_colors_to_select)

countries = government_expenditure_on_education.country.unique()
countries

"""### Plot Barplot"""

# Create a figure and set its size
plt.figure(figsize=(15, 10))

# Set width of bars
barWidth = 0.1

for i, year in enumerate(years_to_plot):
    data = government_expenditure_on_education[government_expenditure_on_education['year'] == year]
    plt.bar(np.arange(data.shape[0]) + (0.2 * i), data['government_expenditure_on_education'],
            color=selected_colors[i], width=barWidth, label=str(year))

# Show legends, labels, and title
plt.legend()
plt.xlabel('Country', fontsize=15)
plt.title("government_expenditure_on_education", fontsize=15)

# Add country names to the x-axis ticks
plt.xticks(np.arange(len(countries)) + 0.2,
           countries, fontsize=10, rotation=45)

# Show the plot
plt.show()

org_df.columns

"""### Get data of Forest Area over the years"""

# we want to see countries forest_area over specfic years
# we need to filter our original data frame to get specific fields

# Filter the data for non-null values
forest_area = org_df[['country', 'year', 'forest_area']].dropna()

"""### Filter from specific year from 1990 to 2020"""


# Define the years for which you want to plot data
years_to_plot = [1990, 2000, 2010, 2015, 2020]

# Get a list of all named colors in Matplotlib
all_colors = list(mcolors.CSS4_COLORS.keys())

# Select a specific number of random colors from the list
num_colors_to_select = 10  # You can change this number as needed
selected_colors = random.sample(all_colors, num_colors_to_select)

countries = forest_area.country.unique()

"""### PLOT barplot"""

# Create a figure and set its size
plt.figure(figsize=(15, 10))

# Set width of bars
barWidth = 0.1

for i, year in enumerate(years_to_plot):
    data = forest_area[forest_area['year'] == year]
    plt.bar(np.arange(data.shape[0]) + (0.2 * i), data['forest_area'],
            color=selected_colors[i], width=barWidth, label=str(year))

# Show legends, labels, and title
plt.legend()
plt.xlabel('Country', fontsize=15)
plt.title("Forest Area", fontsize=15)

# Add country names to the x-axis ticks
plt.xticks(np.arange(len(countries)) + 0.2,
           countries, fontsize=10, rotation=45)

# Show the plot
plt.show()

org_df.country.unique()

"""### Making a DataFrame related to Bosnia and Herzegovina"""

# making dataframe of Bosnia and Herzegovina data from the original dataframe
bos = org_df[org_df['country'] == 'Bosnia and Herzegovina']

"""### Implement a Function which removes Null values and return clean data"""


def remove_null_values(feature):
    return np.array(feature.dropna())


"""### For the Features Present In Bosnia and Herzegovina DataFrame remove the null values
### Print Each Features Size
"""

org_df.columns[2:]

# List of columns to extract
columns_of_interest = ['nitrous_oxide', 'forest_area',
                       'agricultural_land', 'total_population', 'population_growth',
                       'renewable_energy_consumption', 'GDP', 'inflation',
                       'renewable_electricity']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(bos[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 26

# Create the DataFrame using dictionary comprehension
bos_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})


# Create a correlation matrix
correlation_matrix = bos_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='YlGnBu', fmt=".2f")
plt.title('Correlation Heatmap for Bosnia and Herzegovina')
plt.show()

correlation_matrix

org_df.country.unique()

"""### Making a DataFrame related to 'Central African Republic'"""

# making dataframe of Vanuatu data from the original dataframe
ca = org_df[org_df['country'] == 'Central African Republic']

"""### For the Features Present In DataFrame remove the null values
### Print Each Features Size
"""

ca.columns

# List of columns to extract
columns_of_interest = ['nitrous_oxide',
                       'government_expenditure_on_education', 'forest_area',
                       'agricultural_land', 'total_population', 'population_growth',
                       'renewable_energy_consumption', 'GDP', 'inflation',
                       'renewable_electricity']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(ca[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 23

# Create the DataFrame using dictionary comprehension
ca_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})


# Create a correlation matrix
correlation_matrix = ca_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Blues', fmt=".2f")
plt.title('Correlation Heatmap for Central African Republic')
plt.show()

correlation_matrix

org_df.country.unique()

"""### Making a DataFrame related to Iraq"""

# making dataframe of Iraq data from the original dataframe
ir = org_df[org_df['country'] == 'Iraq']

"""### For the Features Present In DataFrame remove the null values
### Print Each Features Size
"""

ir.columns

# List of columns to extract
columns_of_interest = ['nitrous_oxide',
                       'forest_area',
                       'agricultural_land', 'total_population', 'population_growth',
                       'renewable_energy_consumption', 'GDP', 'inflation',
                       'renewable_electricity']

# Dictionary to store feature data after removing null values
feature_data = {}

# Loop through each column to extract and clean the data
for column in columns_of_interest:
    feature_data[column] = remove_null_values(ir[[column]])
    print(f'{column} Length = {len(feature_data[column])}')

# Create data_sources dictionary dynamically
data_sources = {column: feature_data[column] for column in columns_of_interest}

# Determine the number of rows to include
num_rows = 26

# Create the DataFrame using dictionary comprehension
ir_clean_data = pd.DataFrame({
    key: [data_sources[key][x][0] for x in range(num_rows)] for key in data_sources
})


# Create a correlation matrix
correlation_matrix = ir_clean_data.corr()

# Create a heatmap using Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Greens', fmt=".2f")
plt.title('Correlation Heatmap for Iraq')
plt.show()

correlation_matrix

org_df.columns

"""### Get the Year, Country Data Related to renewable_electricity"""

# we want to see countries renewable_electricity over the years
# we need to filter our original data frame to get specific fields
renewable_electricity = org_df[['country', 'year', 'renewable_electricity']]

# drop the null values present in the dataset
renewable_electricity = renewable_electricity.dropna()

"""### Filter the Data For All the Countries"""

# Define countries of interest
countries = org_df.country.unique()
countries

"""### Line Plot of Renewable Energy Consumption"""

# Set fig size
plt.figure(figsize=(15, 10))

# Loop through countries and plot population_growth over the years
for country in countries:
    country_data = renewable_electricity[renewable_electricity['country'] == country]
    plt.plot(country_data['year'],
             country_data['renewable_electricity'], label=country)

# Set X-axis label and title
plt.xlabel('Year', fontweight='bold')
plt.title("Renewable Electricity")

# Show legends and plot
plt.legend(bbox_to_anchor=(0.89, 0.7), shadow=True)
plt.show()

"""### Get the Year, Country Data Related to agricultural_land"""

# we want to see countries agricultural_land over the years
# we need to filter our original data frame to get specific fields
agricultural_land = org_df[['country', 'year', 'agricultural_land']]

# drop the null values present in the dataset
agricultural_land = agricultural_land.dropna()

"""### Filter the Data For All the Countries"""

# Define countries of interest
countries = org_df.country.unique()
countries

"""### Line Plot of agricultural_land"""

# Set fig size
plt.figure(figsize=(15, 10))

# Loop through countries and plot agricultural_land over the years
for country in countries:
    country_data = agricultural_land[agricultural_land['country'] == country]
    plt.plot(country_data['year'],
             country_data['agricultural_land'], label=country)

# Set X-axis label and title
plt.xlabel('Year', fontweight='bold')
plt.title("Agricultural Land")

# Show legends and plot
plt.legend(bbox_to_anchor=(0.89, 0.7), shadow=True)
plt.show()

org_df.columns

# we want to see countries total_population over the years
total_population = org_df[['country', 'year', 'total_population']]

# drop the null values present in the dataset
total_population = total_population.dropna()

# Filter from specific year from 1990 to 2015
# filter data related to 1990
total_population_1990 = total_population[total_population['year'] == 1990]

# filter data related to 2010
total_population_2010 = total_population[total_population['year'] == 2010]

# filter data related to 2020
total_population_2020 = total_population[total_population['year'] == 2020]

total_population_1990

total_population_2010

total_population_2020
total_population_1990

total_population_2010

total_population_2020
